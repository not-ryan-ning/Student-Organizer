/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StudentOrganizer;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author ryan
 */
public class GradeTable extends javax.swing.JFrame {
    ArrayList<Student> studentData;
    ArrayList<ClassGroup> classData;
    ArrayList<StudentGrade> gradeData;

    SearchHelper searcher = new SearchHelper();
    WriterClass writer = new WriterClass();
    ReaderHelper reader = new ReaderHelper();

    /**
     * Creates new form GradeTable
     */
    public GradeTable() {
        studentData = reader.readStudentInformation();
        classData = reader.readClassActivities();
        gradeData = reader.readStudentGrades();

        initComponents();

        addClassesToYearCBox();

        buildGradeTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        extracurricularLabel2 = new javax.swing.JLabel();
        yearCBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        gradeTable = new javax.swing.JTable();
        openClassEditorButton = new javax.swing.JButton();
        extracurricularLabel3 = new javax.swing.JLabel();
        openClassAdderButton = new javax.swing.JButton();
        returnButton = new javax.swing.JButton();

        extracurricularLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        extracurricularLabel2.setText("Class Activities Editor");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        yearCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        yearCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearCBoxActionPerformed(evt);
            }
        });

        gradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        gradeTable.setToolTipText("");
        gradeTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        gradeTable.setGridColor(new java.awt.Color(153, 153, 153));
        gradeTable.setName(""); // NOI18N
        gradeTable.setRequestFocusEnabled(false);
        gradeTable.setRowHeight(25);
        gradeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                gradeTableMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gradeTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(gradeTable);

        openClassEditorButton.setText("Edit Class");
        openClassEditorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openClassEditorButtonActionPerformed(evt);
            }
        });

        extracurricularLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        extracurricularLabel3.setText("Grade Table");

        openClassAdderButton.setText("Add Class");
        openClassAdderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openClassAdderButtonActionPerformed(evt);
            }
        });

        returnButton.setForeground(new java.awt.Color(244, 94, 89));
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(returnButton, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(yearCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(extracurricularLabel3)
                            .addGap(41, 41, 41)
                            .addComponent(openClassAdderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(openClassEditorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 592, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(yearCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openClassEditorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(extracurricularLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(openClassAdderButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void yearCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearCBoxActionPerformed
        // TODO add your handling code here:
        buildGradeTable();
    }//GEN-LAST:event_yearCBoxActionPerformed

    // method to handle open class editor button pressed 
    private void openClassEditorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openClassEditorButtonActionPerformed
        // if there exists classes
        if (!classData.isEmpty()) {
            // create and show ClassEditor 
            ClassEditor classEditor = new ClassEditor();
            classEditor.show();
            // close current frame 
            dispose();
        } else {
            // output appropriate error message 
            JOptionPane.showMessageDialog(null, "Error: There are no classes. Create one!", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_openClassEditorButtonActionPerformed

    // method to handle open class adder button pressed 
    private void openClassAdderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openClassAdderButtonActionPerformed
        // create and show AddClass frame 
        AddClass addClass = new AddClass();
        addClass.show();
        // close current frame
        dispose();
    }//GEN-LAST:event_openClassAdderButtonActionPerformed
    
    // method to handle return button pressed 
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // create and show MainWindow 
        MainWindow mainWindow = new MainWindow();
        mainWindow.show();
        // close current frame
        dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    private void gradeTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gradeTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeTableMouseClicked

    // method to handle clicking on a student row in grade table
    private void gradeTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gradeTableMousePressed
        // get selected row index
        int selectedRowIndex = gradeTable.getSelectedRow();
        
        // get table model
        DefaultTableModel tableModel = (DefaultTableModel) gradeTable.getModel();
        
        // get names from first column of selected row 
        String names = tableModel.getValueAt(selectedRowIndex, 0).toString();
        
        // split names into first and last 
        String[] namesArray = names.split(" ");

        String firstName = namesArray[0];
        String lastName = namesArray[1];
        
        // create and show grade editor with first and last names as parameters
        GradeEditor gradeEditor = new GradeEditor(firstName, lastName);
        gradeEditor.show();
        // close current frame 
        dispose();
    }//GEN-LAST:event_gradeTableMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GradeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GradeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GradeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GradeTable.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GradeTable().setVisible(true);
            }
        });
    }
    
    // method to construct grade table for student grades of a class group
    public void buildGradeTable() {
        // create empty ArrayList to store ClassGroup activities
        ArrayList<String> activitiesArray = new ArrayList<>();
        
        // get selected year level from ComboBox
        String yearLevel = yearCBox.getSelectedItem().toString();
        
        // if year level is not default item 
        if (!yearLevel.equals("None")) {

            // finding all students in that ClassGroup:
            ArrayList<Student> students = searcher.searchStudentYearLevel(studentData, yearLevel);
            
            // find ClassGroup
            ClassGroup classGroup = searcher.findClass(classData, yearLevel);

            // store activities from ClassGroup in ArrayList
            activitiesArray = new ArrayList<>(classGroup.getActivities());

            // first element/column title is name, add that to ArrayList at index 0
            activitiesArray.add(0, "Name");

            // converting ArrayList to Array
            String[] activities = activitiesArray.toArray(new String[activitiesArray.size()]); 

            // replacing _ with space to return it to orignal input form
            for (int i = 0; i < activitiesArray.size(); i++) {
                activities[i] = activities[i].replace("_", " ");
            }

            // constructing 2D array of student grades: 
            // amount of rows is the amount of students in that class:
            int rows = students.size();

            // amount of columns is amount of activities in that class + 1, as the first column is name.
            int columns = classGroup.getActivitiesNumber() + 1; 

            String[][] gradesArray = new String[rows][columns];

            // iterate through each student in class and adding their grades to array: 
            for (int i = 0; i < rows; i++) {

                // getting the current student
                Student currentStudent = students.get(i);

                // getting their name
                String firstName = currentStudent.getFirstName();
                String lastName = currentStudent.getLastName();

                // getting their StudentGrade 
                StudentGrade currentGrades = searcher.findGrade(gradeData, firstName, lastName);

                // getting ArrayList of grades from their StudentGrade: 
                ArrayList<String> grades = currentGrades.getGrades();

                // putting their information into the colummns
                for (int j = 0; j < columns; j++) {

                    // if first column, input their name: 
                    if (j == 0) {
                        gradesArray[i][j] = firstName + " " + lastName;

                        // otherwise, input their grade for the corresponding activity 
                    } else {

                        // get grades of j - 1 because the first column is name, not an activity
                        gradesArray[i][j] = grades.get(j - 1);

                    }
                }
            }
            
            // create new DefaultTableModel for gradeTable
            DefaultTableModel tableModel = new DefaultTableModel(gradesArray, activities) {

                @Override
                public boolean isCellEditable(int row, int column) {
                    // none of the cells should be editable
                    return false;
                }
            };;
            
            // update table model
            gradeTable.setModel(tableModel);
            
            // set preferred width for first column
            TableColumnModel colModel = gradeTable.getColumnModel();
            colModel.getColumn(0).setPreferredWidth(150);

            // none of the headers should be rearranged 
            gradeTable.getTableHeader().setReorderingAllowed(false);
        }

    }

    public void addClassesToYearCBox() {

        if (!classData.isEmpty()) {
            for (int i = 0; i < classData.size(); i++) {
                yearCBox.addItem(classData.get(i).getClassName());
                
            }
            yearCBox.removeItem("None");

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel extracurricularLabel2;
    private javax.swing.JLabel extracurricularLabel3;
    private javax.swing.JTable gradeTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openClassAdderButton;
    private javax.swing.JButton openClassEditorButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JComboBox<String> yearCBox;
    // End of variables declaration//GEN-END:variables
}
