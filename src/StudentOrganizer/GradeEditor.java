/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StudentOrganizer;

import java.io.File;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ryan
 */
public class GradeEditor extends javax.swing.JFrame {
    
    ArrayList<Student> studentData;
    ArrayList<StudentGrade> gradeData;
    ArrayList<ClassGroup> classData;
    
    File classFile = new File("classFile.txt");
    File gradeFile = new File("gradeFile.txt");
    File studentFile = new File("studentFile.txt");
    
    SearchHelper searcher = new SearchHelper();
    WriterClass writer = new WriterClass();
    ReaderHelper reader = new ReaderHelper();
    
    String firstName;
    String lastName;
    
    StudentGrade selectedGrade;
    
    DefaultTableModel gradeModel = new DefaultTableModel();

    /**
     * Creates new form StudentGradeEditor
     */
    public GradeEditor() {
        initComponents();
    }
    
    public GradeEditor(String firstName, String lastName) {   
        this.firstName = firstName;
        this.lastName = lastName;
        
        studentData = reader.readStudentInformation();
        classData = reader.readClassActivities();
        gradeData = reader.readStudentGrades();

        selectedGrade = searcher.findGrade(gradeData, firstName, lastName);

        initComponents();
        
        currentStudentGrades(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        studentGradeTable = new javax.swing.JTable();
        titleLabel = new javax.swing.JLabel();
        returnButton = new javax.swing.JButton();
        confirmChangesButton = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();

        jTextField2.setText("jTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Grade Editor");

        studentGradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        studentGradeTable.setGridColor(new java.awt.Color(153, 153, 153));
        studentGradeTable.setRowHeight(20);
        studentGradeTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                studentGradeTableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(studentGradeTable);

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        titleLabel.setText("Student Grade Editor");

        returnButton.setForeground(new java.awt.Color(244, 94, 89));
        returnButton.setText("Return");
        returnButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                returnButtonMousePressed(evt);
            }
        });

        confirmChangesButton.setForeground(new java.awt.Color(94, 244, 9));
        confirmChangesButton.setText("Confirm");
        confirmChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmChangesButtonActionPerformed(evt);
            }
        });

        nameTextField.setEditable(false);
        nameTextField.setToolTipText("");

        nameLabel.setText("Name:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(returnButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(confirmChangesButton)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nameTextField)))))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(titleLabel)
                .addGap(122, 122, 122))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(returnButton)
                .addGap(1, 1, 1)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(396, 417));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // method to handle confirm changes button pressed 
    private void confirmChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmChangesButtonActionPerformed
        // get the grades of the student
        ArrayList<String> grades = returnGrades();
        
        // create a new StudentGrade with changed grades
        StudentGrade edittedGrade = new StudentGrade(firstName, lastName, grades);   
        
        // add editted StudentGrade to gradeData ArrayList
        gradeData.add(edittedGrade);
        
        // remove old StudentGrade
        gradeData.remove(selectedGrade);
        
        // save data using appropriate writer method
        try {
            writer.saveGradeInformation(gradeData);
        } catch (Exception e) {
            System.out.println("error");
        }
        
        // create and show GradeTable
        GradeTable gradeTable = new GradeTable(); 
        gradeTable.show();
        // close current frame 
        dispose();

    }//GEN-LAST:event_confirmChangesButtonActionPerformed

    // method to handle return button pressed 
    private void returnButtonMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_returnButtonMousePressed
        // create and show GradeTable
        GradeTable gradeTable = new GradeTable(); 
        gradeTable.show();
        // close current frame
        dispose();

    }//GEN-LAST:event_returnButtonMousePressed

    private void studentGradeTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_studentGradeTableMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_studentGradeTableMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GradeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GradeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GradeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GradeEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GradeEditor().setVisible(true);
            }
        });
    }
    
    // method to display specific student grades on grade editor JTable 
    public void currentStudentGrades() {
        // titles array of JTable
        String[] titles = {"Activity", "Grade"};
        
        // find the current student from first and last name passed as parameters 
        Student currentStudent = searcher.findStudent(studentData, firstName, lastName);

        // find the student's class group from year level attribute
        ClassGroup currentClass = searcher.findClass(classData, currentStudent.getYearLevel());
        
        // set nameTextField to their name 
        nameTextField.setText(firstName + " " + lastName);
        
        // get their class group activities into ArrayList
        ArrayList<String> activities = currentClass.getActivities();

        // get their grades into ArrayList
        ArrayList<String> grades = selectedGrade.getGrades();
        
        // Construct 2D array for JTable:
        
        // * Amount of rows is the same as amount of class group activities
        // * Amount of cols is 2, first is activity name, second is grade
        String[][] tableData = new String[activities.size()][2];
        
        for (int i = 0; i < activities.size(); i++) { 
            // first column place in a same row, input activity 
            // replace _ with space to return it to original input form
            tableData[i][0] = activities.get(i).replace("_", " "); 
            
            // second column in the same row, input grade
            // replace _ with space to return it to original input form
            tableData[i][1] = grades.get(i).replaceAll("_", " ");
        }
        // set DefaultTableModel to 2D array and titles array
        gradeModel = new DefaultTableModel(tableData, titles);
        
        // update table model 
        studentGradeTable.setModel(gradeModel); 
    }
    
    // inputs all grades into an arraylist
    public ArrayList<String> returnGrades() {
        // creates an empty ArrayList for grades
        ArrayList<String> grades = new ArrayList<>();
        
        // get the table model of grade table
        DefaultTableModel tableModel = (DefaultTableModel)studentGradeTable.getModel();
        
        // gets the grade value from the 1st column (grade) of each row
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            
            // leading/trailing spaces are removed: 
            String grade = tableModel.getValueAt(i, 1).toString().trim();
            
            // Rrmaining spaces between words are replaced with _:
            grade = grade.replaceAll("\\s", "_");
            
            // check if grade is removed
            if (!grade.equals("")) {
                // if not, text is appended into grades ArrayList
                grades.add(grade);
            } else {
                // if yes, "N/A" is appended into grades ArrayList
                grades.add("N/A");
            }
        }
        
        return grades;
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton confirmChangesButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton returnButton;
    private javax.swing.JTable studentGradeTable;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
