/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StudentOrganizer;

import java.io.File;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ryan
 */
public class AddStudents extends javax.swing.JFrame {

    /**
     * Creates new form AddStudents
     */
    ArrayList<Student> studentData;
    ArrayList<ClassGroup> classData;
    ArrayList<StudentGrade> gradeData;

    SearchHelper searcher = new SearchHelper();
    WriterClass writer = new WriterClass();
    ReaderHelper reader = new ReaderHelper();

    DefaultListModel<String> extracurricularsModel = new DefaultListModel<>();
    DefaultListModel<String> allergiesModel = new DefaultListModel<>();

    public AddStudents() {
        studentData = reader.readStudentInformation();
        classData = reader.readClassActivities();
        gradeData = reader.readStudentGrades();

        initComponents();

        addClassesToYearCBox();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        returnButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        notesTextArea = new javax.swing.JTextArea();
        notesLabel = new javax.swing.JLabel();
        titleLabel = new javax.swing.JLabel();
        dOBTextField = new javax.swing.JTextField();
        contactTextField = new javax.swing.JTextField();
        leavingTextField = new javax.swing.JTextField();
        extracurricularTextField = new javax.swing.JTextField();
        extracurricularLabel = new javax.swing.JLabel();
        leavingLabel = new javax.swing.JLabel();
        contactLabel = new javax.swing.JLabel();
        dOBLabel = new javax.swing.JLabel();
        classLabel = new javax.swing.JLabel();
        addECAButton = new javax.swing.JButton();
        removeECAButton = new javax.swing.JButton();
        allergyTextField = new javax.swing.JTextField();
        allergyLabel = new javax.swing.JLabel();
        addAllergyButton = new javax.swing.JButton();
        confirmChangesButton = new javax.swing.JButton();
        removeAllergyButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        allergiesList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        extracurricularsList = new javax.swing.JList<>();
        yearCBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add Student");

        returnButton.setForeground(new java.awt.Color(244, 94, 89));
        returnButton.setText("Return");
        returnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnButtonActionPerformed(evt);
            }
        });

        nameLabel.setText("First Name:");

        lastNameLabel.setText("Last Name:");

        firstNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameTextFieldActionPerformed(evt);
            }
        });

        lastNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameTextFieldActionPerformed(evt);
            }
        });

        notesTextArea.setColumns(20);
        notesTextArea.setRows(5);
        jScrollPane2.setViewportView(notesTextArea);

        notesLabel.setText("Notes:");

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        titleLabel.setText("Add Student");

        dOBTextField.setText("DD/MM/YYYY");
        dOBTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dOBTextFieldActionPerformed(evt);
            }
        });

        contactTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactTextFieldActionPerformed(evt);
            }
        });

        leavingTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leavingTextFieldActionPerformed(evt);
            }
        });

        extracurricularTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extracurricularTextFieldActionPerformed(evt);
            }
        });

        extracurricularLabel.setText("ECAs: ");

        leavingLabel.setText("Leaving:");

        contactLabel.setText("Contact:");

        dOBLabel.setText("DOB:");

        classLabel.setText("Year Level:");

        addECAButton.setText("Add");
        addECAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addECAButtonActionPerformed(evt);
            }
        });

        removeECAButton.setText("Remove");
        removeECAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeECAButtonActionPerformed(evt);
            }
        });

        allergyTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allergyTextFieldActionPerformed(evt);
            }
        });

        allergyLabel.setText("Allergies:");

        addAllergyButton.setText("Add");
        addAllergyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAllergyButtonActionPerformed(evt);
            }
        });

        confirmChangesButton.setForeground(new java.awt.Color(94, 244, 9));
        confirmChangesButton.setText("Confirm");
        confirmChangesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmChangesButtonActionPerformed(evt);
            }
        });

        removeAllergyButton.setText("Remove");
        removeAllergyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAllergyButtonActionPerformed(evt);
            }
        });

        allergiesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                allergiesListMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(allergiesList);

        extracurricularsList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                extracurricularsListMousePressed(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                extracurricularsListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(extracurricularsList);

        yearCBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "None" }));
        yearCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yearCBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 19, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(allergyLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(allergyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(confirmChangesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addAllergyButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeAllergyButton))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(contactLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(contactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(dOBLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dOBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(leavingLabel)
                                    .addComponent(extracurricularLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(leavingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(extracurricularTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addECAButton, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(removeECAButton))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(nameLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(classLabel)
                                    .addComponent(lastNameLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(yearCBox, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(notesLabel)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                .addComponent(jScrollPane1)
                                .addComponent(jScrollPane2)))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(returnButton)
                        .addGap(206, 206, 206)
                        .addComponent(titleLabel)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(returnButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(titleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLabel)
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameLabel)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classLabel)
                            .addComponent(yearCBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dOBLabel)
                            .addComponent(dOBTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contactLabel)
                            .addComponent(contactTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(leavingLabel)
                            .addComponent(leavingTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(notesLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(extracurricularTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(extracurricularLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addECAButton)
                            .addComponent(removeECAButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(allergyTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allergyLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addAllergyButton)
                            .addComponent(removeAllergyButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmChangesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(669, 439));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // method to handle returnButtonPressed
    private void returnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnButtonActionPerformed
        // when pressed, 
        // MainWindow created and showed
        MainWindow mainWindow = new MainWindow();
        mainWindow.show();
        // current frame closed
        dispose();
    }//GEN-LAST:event_returnButtonActionPerformed

    private void firstNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameTextFieldActionPerformed

    private void lastNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lastNameTextFieldActionPerformed

    private void dOBTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dOBTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dOBTextFieldActionPerformed

    private void contactTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactTextFieldActionPerformed

    private void leavingTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leavingTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_leavingTextFieldActionPerformed

    private void extracurricularTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extracurricularTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extracurricularTextFieldActionPerformed

    // method to handle addECA button pressed
    private void addECAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addECAButtonActionPerformed
        // get user inputted text from extracurricular TextField
        String extracurricular = extracurricularTextField.getText();

        // check if extracurricular is blank 
        if (!extracurricular.isEmpty()) {
            // if not, add extracurricular to JList model (extracurricularsModel)
            extracurricularsModel.addElement(extracurricular);
            // update model
            extracurricularsList.setModel(extracurricularsModel);
        } else {
            // if blank, output appropriate error message
            JOptionPane.showMessageDialog(null, "Error: Extracurricular activity cannot be blank.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        // reset TextField to blank 
        extracurricularTextField.setText("");
    }//GEN-LAST:event_addECAButtonActionPerformed

    // method to handle removeECA button pressed
    private void removeECAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeECAButtonActionPerformed
        // get user inputted text from extracurricular TextField
        String selectedExtracurricular = extracurricularTextField.getText().toLowerCase();

        // loop through each item currently in extracurriculars JList model
        for (int i = 0; i < extracurricularsModel.getSize(); i++) {
            // get current item 
            String currentExtracurricular = extracurricularsModel.getElementAt(i).toLowerCase();

            // check if user inputted extracurricular matches current item
            if (currentExtracurricular.equals(selectedExtracurricular)) {
                // if yes, remove element from extracurriculars JList model
                extracurricularsModel.removeElementAt(i);

                // update model
                extracurricularsList.setModel(extracurricularsModel);
            } 
            
        }
        // reset TextField to blank
        extracurricularTextField.setText("");
    }//GEN-LAST:event_removeECAButtonActionPerformed

    private void allergyTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allergyTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allergyTextFieldActionPerformed

    private void addAllergyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAllergyButtonActionPerformed
        // TODO add your handling code here:
        String allergy = allergyTextField.getText();

        if (!allergy.isEmpty()) {
            allergiesModel.addElement(allergy);

            allergiesList.setModel(allergiesModel);

            allergyTextField.setText("");
        } else {

            // if blank, output appropriate error message
            JOptionPane.showMessageDialog(null, "Error: Allergy cannot be blank.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addAllergyButtonActionPerformed

    // method to handle confirmButton pressed
    private void confirmChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmChangesButtonActionPerformed
        // get all user inputs from TextField and store in variable 
        // all leading/trailing spaces are removed with .trim()
        String firstName = firstNameTextField.getText().trim();
        String lastName = lastNameTextField.getText().trim();
        String yearLevel = yearCBox.getSelectedItem().toString().trim();
        String dateOfBirth = dOBTextField.getText().trim();
        String parentalContact = contactTextField.getText().trim();
        String leavingMethod = leavingTextField.getText().trim();
        String notes = notesTextArea.getText().trim();

        // get extracurriculars and allergies using return methods
        ArrayList<String> extracurriculars = returnExtracurriculars();
        ArrayList<String> allergies = returnAllergies();

        // checks if notes are empty
        if (notes.isEmpty()) {
            // if yes, sets to "none" 
            notes = "none";
        }

        // function to check if inputted fields are valid
        // returns true if valid, false if not 
        boolean flag = checkIfFieldsValid(firstName, lastName, dateOfBirth, parentalContact, yearLevel, leavingMethod);

        // new student only added if true, all fields are valid
        if (flag) {
            // all spaces in notes replaced with _ to store as one string
            notes = notes.replace(" ", "_");

            // student created 
            // all details inputted, obsucred due to length of constructor
            Student newStudent = new Student(firstName, lastName, yearLevel, dateOfBirth, parentalContact, leavingMethod, notes, extracurriculars, allergies);
            // added to ArrayList of students 
            studentData.add(newStudent);

            // studentData ArrayList saved using appropriate writer method
            try {
                writer.saveStudentInformation(studentData);
            } catch (Exception e) {
                System.out.println("error");
            }

            // find student's ClassGroup in classData
            ClassGroup classGroup = searcher.findClass(classData, yearLevel);

            // create 'blank' (N/A for each grade) ArrayList of grades from ClassGroup activities 
            ArrayList<String> newGrades = blankStudentGrades(classGroup);

            // create new StudentGrade from ArrayList
            StudentGrade newGrade = new StudentGrade(firstName, lastName, newGrades);
            // added to ArrayList of student grades
            gradeData.add(newGrade);

            // gradeData ArrayList saved using appropriate writer method
            try {
                writer.saveGradeInformation(gradeData);
            } catch (Exception e) {
                System.out.println("error");
            }

            // MainWindow created and showed 
            MainWindow mainWindow = new MainWindow();
            mainWindow.show();
            // current frame closed
            dispose();

        }

    }//GEN-LAST:event_confirmChangesButtonActionPerformed

    private void removeAllergyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAllergyButtonActionPerformed
        String selectedAllergy = allergyTextField.getText().toLowerCase();

        for (int i = 0; i < allergiesModel.getSize(); i++) {
            String currentAllergy = allergiesModel.getElementAt(i).toLowerCase();

            if (currentAllergy.equals(selectedAllergy)) {
                allergiesModel.removeElementAt(i);
                allergyTextField.setText("");
            } else {

                // if allergy doesn't exist, output appropriate error message: 
                JOptionPane.showMessageDialog(null, "Error: No such allergy exists.", "Error", JOptionPane.ERROR_MESSAGE);

            }
        }

        allergiesList.setModel(allergiesModel);
    }//GEN-LAST:event_removeAllergyButtonActionPerformed

    private void allergiesListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_allergiesListMousePressed
        // TODO add your handling code here:
        String selected = allergiesList.getSelectedValue();

        allergyTextField.setText(selected);
    }//GEN-LAST:event_allergiesListMousePressed

    // method to handle selecting item on extracurricular JList model
    private void extracurricularsListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extracurricularsListMousePressed
        // when clicked, get selected value
        String selected = extracurricularsList.getSelectedValue();

        // set TextField to selected value 
        extracurricularTextField.setText(selected);
    }//GEN-LAST:event_extracurricularsListMousePressed

    private void extracurricularsListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_extracurricularsListMouseClicked
        // TODO add your handling code here:
        ;
    }//GEN-LAST:event_extracurricularsListMouseClicked

    private void yearCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yearCBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_yearCBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddStudents().setVisible(true);
            }
        });
    }

    // method to create a ArrayList of "N/A" grades for a new student's class activities
    public ArrayList<String> blankStudentGrades(ClassGroup classGroup) {
        // new ArrayList created
        ArrayList<String> newGrades = new ArrayList<>();

        // for each activity in ClassGroup
        for (String activity : classGroup.getActivities()) {
            // add N/A to ArrayList
            newGrades.add("N/A");
        }

        // ArrayList is returned
        return newGrades;
    }

    // method to add existing classes to the Year ComboBox
    public void addClassesToYearCBox() {
        // check if ArrayList of ClassGroups is empty
        if (!classData.isEmpty()) {
            // if not, loops for every item (ClassGroup) in ArrayList
            for (int i = 0; i < classData.size(); i++) {
                // for each class, get their name attribute and add to ComboBox
                yearCBox.addItem(classData.get(i).getClassName());

            }
            // remove the default item in ComboBox
            yearCBox.removeItem("None");

        }
        // else, no classes are added, "none" remains in ComboBox
    }

    // method to check if text entered into TextFields is valid
    public boolean checkIfFieldsValid(String firstName, String lastName, String dateOfBirth, String parentalContact, String yearLevel, String leavingMethod) {
        // create a boolean flag 
        boolean flag = true;

        // create a regular expression for the date format DD/MM/YYY
        String dateRegex = "(0[1-9]||[12][0-9]||3[01])/(0[1-9]||1[0-2])/\\d{4}"; // regular expression to match date

        // create new Pattern and Matcher to compare DateOfBirth to RegEx
        Pattern datePattern = Pattern.compile(dateRegex);
        Matcher dateMt = datePattern.matcher(dateOfBirth);

        // flag returns as false if any of the fields are not valid
        // check if there are any classes created
        if (yearLevel.equals("None")) {
            // if yearLevel is "none", error message outputted 
            JOptionPane.showMessageDialog(null, "Error: No classes created yet, create a class!", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

            // check if required fields are empty:
        } else if (firstName.isEmpty()) {
            // if yes, output empty first name error message 
            JOptionPane.showMessageDialog(null, "Error: The first name is not inputted.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

        } else if (lastName.isEmpty()) {
            // if yes, output empty last name error message
            JOptionPane.showMessageDialog(null, "Error: The last name is not inputted.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

        } else if (parentalContact.isEmpty()) {
            // if yes, output empty parental contact error message
            JOptionPane.showMessageDialog(null, "Error: Parental contact is not inputted.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

            // check if there are unwanted spaces between characters in fields
        } else if (firstName.contains(" ")) {
            // if yes, output first name incorrect input error message
            JOptionPane.showMessageDialog(null, "Error: First name not inputted correctly.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

        } else if (lastName.contains(" ")) {
            // if yes, output last name incorrect input error message
            JOptionPane.showMessageDialog(null, "Error: Last name not inputted correctly.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

        } else if (parentalContact.contains(" ")) {
            // if yes, output parental contact incorrect input error message
            JOptionPane.showMessageDialog(null, "Error: Parental contact not inputted correctly.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;
            
        } else if (leavingMethod.contains(" ")) {
            // if yes, output leaving method incorrect input error message
            JOptionPane.showMessageDialog(null, "Error: Leaving method not inputted correctly.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

            // check if date is inputted correctly and is valid:
        } else if (dateMt.matches() != true) {
            // if not, output incorrect birthday format error message 
            JOptionPane.showMessageDialog(null, "Error: Birthday must be in DD/MM/YYYY format and a valid date.", "Error", JOptionPane.ERROR_MESSAGE);
            flag = false;

        }
        // flag is returned
        return flag;
    }

    // method to return all extracurricular activities in its JList model as an ArrayList
    public ArrayList<String> returnExtracurriculars() {
        // blank ArrayList created 
        ArrayList<String> extracurriculars = new ArrayList<>();

        // checks if JList model has elements 
        if (extracurricularsModel.getSize() != 0) {
            // if yes, loops for each item in in
            for (int i = 0; i < extracurricularsModel.getSize(); i++) {
                // for each item, get it and remove leading/trailing spaces
                String extracurricular = extracurricularsModel.getElementAt(i).trim();

                // remaining spaces in between words are replaced with _
                // it can be stored as one string
                extracurricular = extracurricular.replaceAll("\\s", "_");

                // add to ArrayList
                extracurriculars.add(extracurricular);
            }

        } else {
            // if model is empty, adds 'none' instead
            extracurriculars.add("none");
        }

        // extracurriculars ArrayList returned
        return extracurriculars;
    }

    public ArrayList<String> returnAllergies() {
        ArrayList<String> allergies = new ArrayList<>();
        // Inputs all allergies from its jList model into an array

        if (allergiesModel.getSize() != 0) {
            for (int i = 0; i < allergiesModel.getSize(); i++) {
                // when inputting, spaces between words must be replaced with _ to be one string
                // leading/trailing spaces are NOT replaced with _

                // removing leading/trailing spaces:
                String allergy = allergiesModel.getElementAt(i).trim();

                // remaining spaces between words are replaced with _:
                allergy = allergy.replaceAll("\\s", "_");

                allergies.add(allergy);
            }

            // If the model is empty, none is inputted instead
        } else {
            allergies.add("none");
        }

        return allergies;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAllergyButton;
    private javax.swing.JButton addECAButton;
    private javax.swing.JList<String> allergiesList;
    private javax.swing.JLabel allergyLabel;
    private javax.swing.JTextField allergyTextField;
    private javax.swing.JLabel classLabel;
    private javax.swing.JButton confirmChangesButton;
    private javax.swing.JLabel contactLabel;
    private javax.swing.JTextField contactTextField;
    private javax.swing.JLabel dOBLabel;
    private javax.swing.JTextField dOBTextField;
    private javax.swing.JLabel extracurricularLabel;
    private javax.swing.JTextField extracurricularTextField;
    private javax.swing.JList<String> extracurricularsList;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JLabel leavingLabel;
    private javax.swing.JTextField leavingTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel notesLabel;
    private javax.swing.JTextArea notesTextArea;
    private javax.swing.JButton removeAllergyButton;
    private javax.swing.JButton removeECAButton;
    private javax.swing.JButton returnButton;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JComboBox<String> yearCBox;
    // End of variables declaration//GEN-END:variables
}
